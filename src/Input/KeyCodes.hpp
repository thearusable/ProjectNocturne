#pragma once
#include <SDL_events.h>

namespace noc::input
{
   enum class NOC_KEY{
		NOCK_UNKNOWN = SDLK_UNKNOWN,
    	NOCK_RETURN = SDLK_RETURN,
    	NOCK_ESCAPE = SDLK_ESCAPE,
    	NOCK_BACKSPACE = SDLK_BACKSPACE,
    	NOCK_TAB = SDLK_TAB,
    	NOCK_SPACE = SDLK_SPACE,
    	NOCK_EXCLAIM = SDLK_EXCLAIM,
    	NOCK_QUOTEDBL = SDLK_QUOTEDBL,
    	NOCK_HASH = SDLK_HASH,
    	NOCK_PERCENT = SDLK_PERCENT,
    	NOCK_DOLLAR = SDLK_DOLLAR,
    	NOCK_AMPERSAND = SDLK_AMPERSAND,
    	NOCK_QUOTE = SDLK_QUOTE,
    	NOCK_LEFTPAREN = SDLK_LEFTPAREN,
    	NOCK_RIGHTPAREN = SDLK_RIGHTPAREN,
    	NOCK_ASTERISK = SDLK_ASTERISK,
    	NOCK_PLUS = SDLK_PLUS,
    	NOCK_COMMA = SDLK_COMMA,
    	NOCK_MINUS = SDLK_MINUS,
    	NOCK_PERIOD = SDLK_PERIOD,
    	NOCK_SLASH = SDLK_SLASH,
    	NOCK_0 = SDLK_0,
    	NOCK_1 = SDLK_1,
    	NOCK_2 = SDLK_2,
    	NOCK_3 = SDLK_3,
    	NOCK_4 = SDLK_4,
    	NOCK_5 = SDLK_5,
    	NOCK_6 = SDLK_6,
    	NOCK_7 = SDLK_7,
    	NOCK_8 = SDLK_8,
    	NOCK_9 = SDLK_9,
    	NOCK_COLON = SDLK_COLON,
    	NOCK_SEMICOLON = SDLK_SEMICOLON,
    	NOCK_LESS = SDLK_LESS,
    	NOCK_EQUALS = SDLK_EQUALS,
    	NOCK_GREATER = SDLK_GREATER,
    	NOCK_QUESTION = SDLK_QUESTION,
    	NOCK_AT = SDLK_AT,
    	NOCK_LEFTBRACKET = SDLK_LEFTBRACKET,
    	NOCK_BACKSLASH = SDLK_BACKSLASH,
    	NOCK_RIGHTBRACKET = SDLK_RIGHTBRACKET,
    	NOCK_CARET = SDLK_CARET,
    	NOCK_UNDERSCORE = SDLK_UNDERSCORE,
    	NOCK_BACKQUOTE = SDLK_BACKQUOTE,
    	NOCK_a = SDLK_a,
    	NOCK_b = SDLK_b,
    	NOCK_c = SDLK_c,
    	NOCK_d = SDLK_d,
    	NOCK_e = SDLK_e,
    	NOCK_f = SDLK_f,
    	NOCK_g = SDLK_g,
    	NOCK_h = SDLK_h,
    	NOCK_i = SDLK_i,
    	NOCK_j = SDLK_j,
    	NOCK_k = SDLK_k,
    	NOCK_l = SDLK_l,
    	NOCK_m = SDLK_m,
    	NOCK_n = SDLK_n,
    	NOCK_o = SDLK_o,
    	NOCK_p = SDLK_p,
    	NOCK_q = SDLK_q,
    	NOCK_r = SDLK_r,
  		NOCK_s = SDLK_s,
  		NOCK_t = SDLK_t,
  		NOCK_u = SDLK_u,
  		NOCK_v = SDLK_v,
  		NOCK_w = SDLK_w,
  		NOCK_x = SDLK_x,
  		NOCK_y = SDLK_y,
  		NOCK_z = SDLK_z,

	 	NOCK_CAPSLOCK = SDLK_CAPSLOCK,

	 	NOCK_F1 = SDLK_F1,
  		NOCK_F2 = SDLK_F2,
  		NOCK_F3 = SDLK_F3,
  		NOCK_F4 = SDLK_F4,
  		NOCK_F5 = SDLK_F5,
  		NOCK_F6 = SDLK_F6,
  		NOCK_F7 = SDLK_F7,
  		NOCK_F8 = SDLK_F8,
  		NOCK_F9 = SDLK_F9,
  		NOCK_F10 = SDLK_F10,
  		NOCK_F11 = SDLK_F11,
  		NOCK_F12 = SDLK_F12,

	 	NOCK_PRINTSCREEN = SDLK_PRINTSCREEN,
  		NOCK_SCROLLLOCK = SDLK_SCROLLLOCK,
  		NOCK_PAUSE = SDLK_PAUSE,
  		NOCK_INSERT = SDLK_INSERT,
  		NOCK_HOME = SDLK_HOME,
  		NOCK_PAGEUP = SDLK_PAGEUP,
  		NOCK_DELETE = SDLK_DELETE,
  		NOCK_END = SDLK_END,
  		NOCK_PAGEDOWN = SDLK_PAGEDOWN,
  		NOCK_RIGHT = SDLK_RIGHT,
  		NOCK_LEFT = SDLK_LEFT,
  		NOCK_DOWN = SDLK_DOWN,
  		NOCK_UP = SDLK_UP,

	 	NOCK_NUMLOCKCLEAR = SDLK_NUMLOCKCLEAR
  		//NOCK_A = SDLK_KP_DIVIDE,
  		//NOCK_A = SDLK_KP_MULTIPLY,
  		//NOCK_A = SDLK_KP_MINUS,
  		//NOCK_A = SDLK_KP_PLUS,
  		//NOCK_A = SDLK_KP_ENTER,
  		//NOCK_A = SDLK_KP_1,
  		//NOCK_A = SDLK_KP_2,
  		//NOCK_A = SDLK_KP_3,
  		//NOCK_A = SDLK_KP_4,
    //	NOCK_A = SDLK_KP_5,
    //	NOCK_A = SDLK_KP_6,
    //	NOCK_A = SDLK_KP_7,
    //	NOCK_A = SDLK_KP_8,
    //	NOCK_A = SDLK_KP_9,
    //	NOCK_A = SDLK_KP_0,
    //	NOCK_A = SDLK_KP_PERIOD,

    //	NOCK_A = SDLK_APPLICATION,
    //	NOCK_A = SDLK_POWER,
    //	NOCK_A = SDLK_KP_EQUALS,
    //	NOCK_A = SDLK_F13,
    //	NOCK_A = SDLK_F14,
    //	NOCK_A = SDLK_F15,
    //	NOCK_A = SDLK_F16,
    //	NOCK_A = SDLK_F17,
    //	NOCK_A = SDLK_F18,
    //	NOCK_A = SDLK_F19,
    //	NOCK_A = SDLK_F20,
    //	NOCK_A = SDLK_F21,
    //	NOCK_A = SDLK_F22,
    //	NOCK_A = SDLK_F23,
    //	NOCK_A = SDLK_F24,
    //	NOCK_A = SDLK_EXECUTE,
    //	NOCK_A = SDLK_HELP,
    //	NOCK_A = SDLK_MENU,
    //	NOCK_A = SDLK_SELECT,
    //	NOCK_A = SDLK_STOP,
    //	NOCK_A = SDLK_AGAIN,
    //	NOCK_A = SDLK_UNDO,
    //	NOCK_A = SDLK_CUT,
    //	NOCK_A = SDLK_COPY,
    //	NOCK_A = SDLK_PASTE,
    //	NOCK_A = SDLK_FIND,
    //	NOCK_A = SDLK_MUTE,
    //	NOCK_A = SDLK_VOLUMEUP,
    //	NOCK_A = SDLK_VOLUMEDOWN,
    //	NOCK_A = SDLK_KP_COMMA,
    //	NOCK_A = SDL_SCANCODE_KP_EQUALSAS400,

    //	NOCK_A = SDLK_ALTERASE,
    //	NOCK_A = SDLK_SYSREQ,
    //	NOCK_A = SDLK_CANCEL,
    //	NOCK_A = SDLK_CLEAR,
    //	NOCK_A = SDLK_PRIOR,
    //	NOCK_A = SDLK_RETURN2,
    //	NOCK_A = SDLK_SEPARATOR,
    //	NOCK_A = SDLK_OUT,
    //	NOCK_A = SDLK_OPER,
    //	NOCK_A = SDLK_CLEARAGAIN,
    //	NOCK_A = SDLK_CRSEL,
    //	NOCK_A = SDLK_EXSEL,

    //	NOCK_A = SDLK_KP_00,
    //	NOCK_A = SDLK_KP_000,
    //	NOCK_A = SDL_SCANCODE_THOUSANDSSEPARATOR,
    //	NOCK_A = SDL_SCANCODE_DECIMALSEPARATOR,
    //	NOCK_A = SDLK_CURRENCYUNIT,
    //	NOCK_A = SDL_SCANCODE_CURRENCYSUBUNIT,
    //	NOCK_A = SDLK_KP_LEFTPAREN,
    //	NOCK_A = SDLK_KP_RIGHTPAREN,
    //	NOCK_A = SDLK_KP_LEFTBRACE,
    //	NOCK_A = SDLK_KP_RIGHTBRACE,
    //	NOCK_A = SDLK_KP_TAB,
    //	NOCK_A = SDLK_KP_BACKSPACE,
    //	NOCK_A = SDLK_KP_A,
    //	NOCK_A = SDLK_KP_B,
    //	NOCK_A = SDLK_KP_C,
    //	NOCK_A = SDLK_KP_D,
    //	NOCK_A = SDLK_KP_E,
    //	NOCK_A = SDLK_KP_F,
    //	NOCK_A = SDLK_KP_XOR,
    //	NOCK_A = SDLK_KP_POWER,
    //	NOCK_A = SDLK_KP_PERCENT,
    //	NOCK_A = SDLK_KP_LESS,
    //	NOCK_A = SDLK_KP_GREATER,
    //	NOCK_A = SDLK_KP_AMPERSAND,
    //	NOCK_A = SDL_SCANCODE_KP_DBLAMPERSAND,
    //	NOCK_A = SDL_SCANCODE_KP_VERTICALBAR,
    //	NOCK_A = SDL_SCANCODE_KP_DBLVERTICALBAR,
    //	NOCK_A = SDLK_KP_COLON,
    //	NOCK_A = SDLK_KP_HASH,
    //	NOCK_A = SDLK_KP_SPACE,
    //	NOCK_A = SDLK_KP_AT,
    //	NOCK_A = SDLK_KP_EXCLAM,
    //	NOCK_A = SDLK_KP_MEMSTORE,
    //	NOCK_A = SDLK_KP_MEMRECALL,
    //	NOCK_A = SDLK_KP_MEMCLEAR,
    //	NOCK_A = SDLK_KP_MEMADD,
    //	NOCK_A = SDL_SCANCODE_KP_MEMSUBTRACT,
    //	NOCK_A = SDL_SCANCODE_KP_MEMMULTIPLY,
    //	NOCK_A = SDLK_KP_MEMDIVIDE,
    //	NOCK_A = SDLK_KP_PLUSMINUS,
    //	NOCK_A = SDLK_KP_CLEAR,
    //	NOCK_A = SDLK_KP_CLEARENTRY,
    //	NOCK_A = SDLK_KP_BINARY,
    //	NOCK_A = SDLK_KP_OCTAL,
    //	NOCK_A = SDLK_KP_DECIMAL,
    //	NOCK_A = SDLK_LCTRL,
    //	NOCK_A = SDLK_LSHIFT,
    //	NOCK_A = SDLK_LALT,
    //	NOCK_A = SDLK_RCTRL,
    //	NOCK_A = SDLK_RSHIFT,
    //	NOCK_A = SDLK_RALT

	};

//	enum class NOC_Keymod
//{
//    KMOD_NONE = 0x0000,
//    KMOD_LSHIFT = 0x0001,
//    KMOD_RSHIFT = 0x0002,
//    KMOD_LCTRL = 0x0040,
//    KMOD_RCTRL = 0x0080,
//    KMOD_LALT = 0x0100,
//    KMOD_RALT = 0x0200,
//    KMOD_LGUI = 0x0400,
//    KMOD_RGUI = 0x0800,
//    KMOD_NUM = 0x1000,
//    KMOD_CAPS = 0x2000,
//    KMOD_MODE = 0x4000,
//    KMOD_RESERVED = 0x8000
//};

enum class NOC_KEY_STATE{
	PRESSED = 0,
	RELEASED
};
   }   // namespace noc::input
